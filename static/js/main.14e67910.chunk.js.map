{"version":3,"sources":["logo.svg","Components/Menu/MenuItem/index.js","Components/StockData/Calendar/index.js","Components/Menu/MenuItemPost/index.js","Components/Menu/index.js","Components/StockData/LineChart/index.js","Components/StockData/index.js","Components/RedditPosts/RedditPost/index.js","Components/RedditData/index.js","Components/RedditPosts/index.js","Views/Home/index.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItem","trimPercent","number","Math","abs","whole","floor","percent","round","this","props","ticker","isCurrentStock","percentChange","change","compressedPercentString","substring","onClick","stockChange","name","style","backgroundColor","className","float","display","margin","price","color","Icon","Popup","inverted","position","content","trigger","retailControl","shortRatio","Component","Calendar","getMonthAgo","d","Date","setMonth","getMonth","getOneWeekAgo","setDate","getDate","startDate","endDate","selected","onChange","date","handleDateChange","MenuItemPost","isNaN","title","compound","description","isPositive","marginTop","marginLeft","fontSize","Menu","handleStockChange","stockName","state","tickerData","tickers","forEach","data","localStorage","getItem","setState","JSON","parse","fetch","then","res","json","object","companyName","Object","keys","open","close","push","length","setItem","stringify","currentStock","showReddit","selectedDate","sort","a","b","indexOf","posts","getTime","yesterday","tomorrow","console","log","filter","post","time","created","Header","as","icon","Subheader","moment","format","map","body","LineChart","fetchData","graphData","getAverageBull","dataPoints","average","point","getBullScores","labels","prices","bullScores","arr","i","label","index","bullScore","prevProps","prevState","snapshot","positive","dates","lineColor","startTime","endTime","increment","tempDates","curr","Number","parseInt","dataLine","datasets","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","lineChartInst","chartOptions","onHover","e","item","chartInstance","getElementAtEvent","_index","previousPrice","updateUi","legend","chart","text","includes","options","ref","reference","StockData","updateUIPrice","stockPriceGraph","percentChangeGraph","changeDate","find","priceColor","Divider","width","RedditPost","marginBottom","RedditPosts","bulls","bears","averagePositive","averageNegative","bull","bear","Home","stock","showRedditFunc","show","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14e67910.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\nimport './stylesheet.scss'\nimport {Icon, Popup } from 'semantic-ui-react';\n\nclass MenuItem extends Component {\n    render() {\n        const { ticker, isCurrentStock } = this.props;\n\n        let percentChange = ticker.change;\n        let percentString = (Math.abs(percentChange) * 100);\n        let compressedPercentString = (percentString + '').substring(0, 4);\n\n        return (\n            <div onClick={() => this.props.stockChange(ticker.name)} style={isCurrentStock ? {backgroundColor: 'rgba(0,0,0,0.6)'} : {}} className=\"MenuItem-wolf\">\n                <h3 className=\"header\">{ticker.name}</h3>\n                <h5 style={{float:'right', display: 'inline', margin: '0'}}>\n                    ${Math.floor(ticker.price) + \".\" + Math.round((ticker.price - Math.floor(ticker.price)) * 100)}\n                    <br/>\n                    <span\n                        style={\n                            percentChange < 0\n                                ? { color: 'rgb(255,80,0)' }\n                                : { color: 'rgb(0,200,5)' }\n                        }\n                        className=\"change\">\n\t\t\t\t{compressedPercentString} %\n\t\t\t\t<Icon\n                    className=\"icon\"\n                    name={percentChange < 0 ? 'arrow down' : 'arrow up'}\n\n                />\n\t\t\t</span>\n                </h5>\n                <br/>\n                <br/>\n\n                <span className=\"pop-wrapper\">\n                    <Popup\n                        inverted\n                        position='left center'\n                        content={'An estimation of the percent of the float owned by retail investors. A higher percent means WSB has more control'}\n                        trigger={\n                            <Icon\n                                className=\"info-pop\"\n                                name=\"question circle\"\n                            />\n                        }\n                    />\n                    <span className=\"text\">Retail Control: {this.trimPercent(ticker.retailControl)}%</span>\n                    </span>\n                <br/>\n                <br/>\n                <span className=\"pop-wrapper\">\n\n                    <Popup\n                        inverted\n                        position='left center'\n                        content={'An estimation of the percent of the company currently shorted'}\n                        trigger={\n                            <Icon\n                                className=\"info-pop\"\n                                name=\"question circle\"\n                            />\n                        }\n                    />\n\n                    <span className=\"text\">Short Squeeze Danger {this.trimPercent(ticker.shortRatio * 100)}%</span>\n                </span>\n                <br/>\n            </div>\n        )\n    }\n\n    trimPercent = number => {\n        number = Math.abs(number);\n        let whole = Math.floor(number);\n\n        let percent = Math.round((number - whole) * 100);\n\n        if (!whole || !percent) {\n            return '0.00';\n        }\n\n        return whole + '.' + percent;\n    }\n}\n\nexport default MenuItem;","import React, { Component } from 'react';\nimport moment from 'moment';\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './stylesheet.scss'\n\nclass Calendar extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n\n    getMonthAgo = () => {\n        let d = new Date();\n        d.setMonth(d.getMonth() - 1);\n        return d;\n    };\n\n    getOneWeekAgo = () => {\n        let d = new Date();\n        d.setDate(d.getDate() - 7);\n        return d;\n    };\n\n    render() {\n        const {startDate, endDate} = this.props;\n\n        return (\n            <div className=\"Calendar\">\n                <div style={{float: 'left'}}>\n                    <h3 className=\"header\">Start</h3>\n                    <DatePicker selected={startDate} onChange={date => this.props.handleDateChange(date, endDate)}/>\n                </div>\n                <div>\n                    <h3 className=\"header\">End</h3>\n                    <DatePicker selected={endDate} onChange={date => this.props.handleDateChange(startDate, date)} />\n                </div>\n            </div>\n\n        );\n    }\n\n}\n\nexport default Calendar\n\n\n","import React, { Component } from 'react';\nimport './stylesheet.scss'\nimport {Icon} from \"semantic-ui-react\";\n\nclass MenuItemPost extends Component {\n\n    trimPercent = number => {\n        let isPositive = number > 0;\n        number = Math.abs(number);\n        let whole = Math.floor(number);\n\n        let percent = Math.round((number - whole) * 100);\n\n        if (isNaN(whole) || isNaN(percent)) {\n            return '0.00';\n        }\n\n        return whole + '.' + percent;\n    };\n\n\n    render() {\n        const {title, description, compound, isPositive} = this.props;\n        return (\n            <div className=\"MenuItem-wolf\">\n                <h5>{title}</h5>\n                <span\n                    style={\n                        !isPositive\n                            ? {color: 'rgb(255,80,0)', marginTop: '2rem', marginLeft: '5px', fontSize: '15px'}\n                            : {color: 'rgb(0,200,5)', marginTop: '2rem', marginLeft: '5px', fontSize: '15px'}\n                    }\n                    className=\"change\">\n                    {this.trimPercent(compound * 100)}%\n                    <Icon\n                        className=\"icon\"\n                        name={!isPositive ? 'arrow down' : 'arrow up'}\n\n                    />\n                    </span>\n\n            </div>\n        )\n    }\n}\n\nexport default MenuItemPost;\n\n","import React, { Component } from 'react';\nimport './stylesheet.scss'\nimport MenuItem from \"./MenuItem\";\nimport { Header, Icon } from 'semantic-ui-react'\nimport Calendar from \"../StockData/Calendar\";\nimport moment from 'moment'\nimport data from '../../constants/result';\nimport MenuItemPost from \"./MenuItemPost\";\n\n\nclass Menu extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tickerData: [],\n        }\n    }\n    componentDidMount() {\n        const { tickers } = this.props;\n        const { tickerData } = this.state;\n        tickers.forEach(ticker => {\n            let data = localStorage.getItem(`daily`);\n            if (!data) {\n                fetch(`https://www.alphavantage.co/query?function=OVERVIEW&symbol=${ticker}&apikey=GKZ3KECUBD35TO97`)\n                    .then(res => res.json())\n                    .then(data => {\n                        let object = {\n                            shortRatio: data['SharesShort'] / data['SharesFloat'],\n                            price: data['200DayMovingAverage'],\n                            retailControl: Math.abs(100 - data['PercentInstitutions'] - data['PercentInsiders']),\n                            name: ticker,\n                            companyName: data['Name']\n                        };\n                        fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=GKZ3KECUBD35TO97`)\n                            .then(res => res.json())\n                            .then(data => {\n                                if (data['Time Series (Daily)']) {\n                                    let startDate = Object.keys(data['Time Series (Daily)'])[0];\n\n                                    let open = data['Time Series (Daily)'][startDate]['1. open'];\n                                    let close = data['Time Series (Daily)'][startDate]['4. close'];\n                                    object.price = close;\n                                    object.change = (close - open) / open;\n                                }\n\n                                tickerData.push(object);\n                                if (tickerData.length === tickers.length) {\n                                    localStorage.setItem(`daily`, JSON.stringify(tickerData));\n                                    this.setState({tickerData});\n                                }\n                            });\n\n\n\n                    });\n            } else {\n                this.setState({tickerData: JSON.parse(data)});\n            }\n        });\n\n\n    }\n\n    handleStockChange = (stockName) => {\n        this.props.handleStockChange(stockName);\n    };\n\n\n    render() {\n        const { tickerData } = this.state;\n        const { tickers, currentStock, showReddit, selectedDate, isPositive } = this.props;\n        tickerData.sort((a, b) => tickers.indexOf(a.name) - tickers.indexOf(b.name));\n\n        let posts = data[currentStock];\n\n        if (showReddit) {\n            let date = new Date(selectedDate.getTime());\n            let yesterday = date.setDate(date.getDate() - 1);\n            date = new Date(selectedDate.getTime());\n            let tomorrow = date.setDate(date.getDate() + 1);\n            console.log(yesterday);\n            console.log(tomorrow);\n            posts = posts.filter(post => {\n                let time = new Date(post.created * 1000);\n                return time > yesterday && time < tomorrow;\n            })\n        }\n\n        console.log(posts);\n\n        return (\n            <div className=\"Menu\">\n                {!showReddit ?\n                    <Header style={{color: 'white'}} as='h3' icon>\n                        Trending Stocks\n                        <Icon name=\"line graph\"/>\n                    </Header>\n                    :\n                    <Header style={{color: 'white'}} as='h3' icon>\n                        Trending Reddit Posts\n                        <Header.Subheader style={{color: 'white'}}>\n                            {moment(selectedDate).format('MMMM Do YYYY')}\n                        </Header.Subheader>\n                        <Icon name=\"comment\"/>\n                    </Header>\n                }\n                <br/>\n                {!showReddit ?\n                    tickerData.map(ticker =>\n                    (<MenuItem\n                        stockChange={this.handleStockChange}\n                        isCurrentStock={ticker.name === currentStock}\n                        ticker={ticker}\n                    />))\n                        :\n\n                    posts.map(post => (\n                        <MenuItemPost\n                            title={post.title}\n                            description={post.body}\n                            compound={post.compound}\n                            isPositive={isPositive}\n                        />\n                    ))\n                    }\n            </div>\n        );\n    }\n}\n\nexport default Menu","import React, { Component } from 'react';\nimport './stylesheet.scss'\nimport {Line} from 'react-chartjs-2';\nimport moment from 'moment'\n\nimport data from '../../../constants/result'\n\nconst PARTITIONS = 100;\n\nclass LineChart extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            graphData: null\n        }\n\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.ticker && prevProps.ticker !== this.props.ticker) {\n            this.fetchData();\n        }\n\n    }\n\n    trimPercent = number => {\n        let isPositive = number > 0;\n        number = Math.abs(number);\n        let whole = Math.floor(number);\n\n        let percent = Math.round((number - whole) * 100);\n\n        if (isNaN(whole) || isNaN(percent)) {\n            return '0.00';\n        }\n\n        return (isPositive ? '' : '-') + whole + '.' + percent;\n    };\n\n    fetchData = () => {\n        const { ticker } = this.props;\n        fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${ticker}&interval=60min&outputsize=full&apikey=GKZ3KECUBD35TO97`)\n            .then(res => res.json())\n            .then(data => {\n                this.setState({graphData: data['Time Series (60min)']});\n            })\n    };\n\n    getAverageBull = () => {\n        const { ticker, startDate, endDate } = this.props;\n\n        let arr = data[ticker];\n        let dataPoints = arr.filter(a => {\n            let time = a.created * 1000;\n            return time >= startDate.getTime() && time <= endDate.getTime();\n        });\n\n        let average = 0;\n\n        dataPoints.forEach(point => {\n           average += point.compound;\n        });\n\n        return average / dataPoints.length;\n\n    };\n\n    getBullScores = (labels, prices) => {\n        const { ticker } = this.props;\n        let bullScores = [];\n\n        let arr = data[ticker];\n\n        let average = 0;\n\n        for (let i = 0; i < prices.length; i++) {\n            average += prices[i];\n        }\n\n        average /= prices.length;\n\n\n\n        labels.forEach((label, index) => {\n            let dataPoints = arr.filter(a => {\n                if (index < labels.length - 1) {\n                    return (a.created * 1000) > label && (a.created * 1000) < (labels[index + 1])\n                } else {\n                    return (a.created * 1000) > label;\n                }\n            });\n\n\n            let bullScore = 0;\n\n            dataPoints.forEach(post => {\n                bullScore += (post.compound);\n            });\n\n            bullScore /= dataPoints.length;\n\n            bullScore = (bullScore *  average) || 0;\n\n\n\n\n\n            bullScores.push(bullScore);\n\n        });\n\n        return bullScores;\n\n    };\n\n    render() {\n        const {startDate, endDate, positive, ticker, companyName} = this.props;\n        const { graphData } = this.state;\n\n        if (!graphData) {\n            return null;\n        }\n\n        let dates = Object.keys(graphData);\n\n        let lineColor = positive ? 'rgb(0,200,5)' : 'rgb(255,80,0)';\n\n        let startTime = startDate.getTime();\n        let endTime = endDate.getTime();\n\n        let increment = (endTime - startTime) / PARTITIONS;\n\n        let labels = [];\n        let prices = [];\n\n        for (let i = startTime; i < endTime; i += increment) {\n            let price = 0;\n\n            let tempDates = dates.filter(a => {\n                let curr = new Date(a);\n\n                return curr <= new Date(i + increment) && curr >= new Date(i)\n            });\n\n            tempDates.forEach(date => {\n                price += Number.parseInt(graphData[date]['2. high'])\n            });\n\n\n\n\n            if (tempDates.length > 0) {\n                price /= tempDates.length;\n                labels.push(new Date(i));\n                prices.push(price);\n            }\n\n        }\n\n        let bullScores = this.getBullScores(labels, prices);\n        let averageBull = this.getAverageBull();\n\n\n        const dataLine = {\n            labels: labels.map(a => moment(new Date(a)).format('MMMM Do YYYY')),\n            datasets: [\n                {\n                    label: `${companyName || ''} (${ticker}) Price`,\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'black',\n                    borderColor: lineColor,\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: prices\n                },\n\n                {\n                    label: `${companyName || ''} (${ticker}) Bullishness`,\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'black',\n                    borderColor: 'orange',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'orange',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'orange',\n                    pointHoverBorderColor: 'orange',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: bullScores\n                },\n\n                {\n                    label: `Zero`,\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'white',\n                    borderColor: 'white',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'white',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'white',\n                    pointHoverBorderColor: 'white',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: bullScores.map(a => 0)\n                },\n            ]\n\n        };\n\n        let lineChartInst = null;\n        let props = this.props;\n\n        const chartOptions = {\n            onHover: e => {\n                if (!lineChartInst) {\n                    return;\n                }\n                const item = lineChartInst.chartInstance.getElementAtEvent(e);\n\n                let price = null;\n                let percentChange = null;\n                let date = null;\n\n                if (item.length !== 0) {\n                    let index = item[0]._index;\n                    price = prices[index];\n                    let previousPrice = index === 0 ? 1 : prices[index - 1];\n\n                    percentChange = (price - previousPrice)/ previousPrice;\n                    date = labels[index];\n                }\n\n                props.updateUi(price, percentChange, date);\n            },\n\n            legend: {\n                labels: {\n                    filter: function(item, chart) {\n                        // Logic to remove a particular legend item goes here\n                        return !item.text.includes('Zero');\n                    }\n                }\n            }\n        };\n\n\n        return (\n            <div className=\"LineChart\">\n                <Line data={dataLine}\n                      options={chartOptions}\n                      ref={reference => lineChartInst = reference}\n                />\n            </div>\n        )\n    };\n\n\n}\n\nexport default LineChart;","import React, { Component } from 'react';\nimport './stylesheet.scss'\nimport { Divider } from 'semantic-ui-react'\nimport {Icon, Header } from 'semantic-ui-react';\nimport Calendar from \"./Calendar\";\nimport LineChart from \"./LineChart\";\n\nclass StockData extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            percentChangeGraph: null,\n            stockPriceGraph: null,\n        }\n    }\n\n\n    trimPercent = number => {\n        number = Math.abs(number);\n        let whole = Math.floor(number);\n\n        let percent = Math.round((number - whole) * 100);\n\n        if (isNaN(whole) || isNaN(percent)) {\n            return '0.00';\n        }\n\n        return whole + '.' + percent;\n    };\n\n    updateUIPrice = (stockPriceGraph, percentChangeGraph, date) => {\n        this.setState({stockPriceGraph, percentChangeGraph});\n        this.props.showReddit(stockPriceGraph !== null, date, percentChangeGraph > 0)\n    };\n\n    handleDateChange = (startDate, endDate) => {\n        this.props.changeDate(startDate, endDate);\n    };\n\n    render() {\n        const { percentChangeGraph, stockPriceGraph} = this.state;\n        const {startDate, endDate} = this.props;\n\n        let data = localStorage.getItem(`daily`);\n\n        const { currentStock } = this.props;\n        if (!data) {\n            return null;\n        }\n        data = JSON.parse(data);\n\n\n        let { companyName, name, change, price } = data.find(d => d.name === currentStock);\n\n        change = percentChangeGraph || change;\n        price = stockPriceGraph || price;\n\n        let percentString = (Math.abs(change) * 100);\n        let compressedPercentString = (percentString + '').substring(0, 4);\n\n        let priceColor =\n        !percentChangeGraph ? 'white'\n            : percentChangeGraph < 0 ? 'rgb(255,80,0)' : 'rgb(0,200,5)';\n\n\n        return (\n            <div className=\"StockData\">\n                <Divider />\n\n                <Calendar\n                    startDate={startDate}\n                    endDate={endDate}\n                    handleDateChange={this.handleDateChange}\n                />\n\n                <br/>\n                <br/>\n                <br/>\n\n                <Header as='h1' className=\"header\" style={\n                    !percentChangeGraph ? {width: 'auto', color: 'white'}\n                        : percentChangeGraph < 0 ?{width: 'auto', color: 'rgb(255,80,0)'} : {width: 'auto', color: 'rgb(0,200,5)' }\n                }>\n                    {companyName ? `${companyName} (${name})` : name}\n\n                    <Header.Subheader style={{color: priceColor, marginTop: '1rem', fontSize: '30px'}}>\n                        ${this.trimPercent(price)}\n                        <span\n                            style={\n                                change < 0\n                                    ? { color: 'rgb(255,80,0)', marginTop: '2rem', marginLeft: '5px', fontSize: '15px'}\n                                    : { color: 'rgb(0,200,5)', marginTop: '2rem', marginLeft: '5px', fontSize: '15px'}\n                            }\n                            className=\"change\">\n                    {compressedPercentString}%\n                    <Icon\n                        className=\"icon\"\n                        name={change < 0 ? 'arrow down' : 'arrow up'}\n\n                    />\n                    </span>\n                    </Header.Subheader>\n                </Header>\n\n                <LineChart\n                    positive={change >= 0}\n                    startDate={startDate}\n                    endDate={endDate}\n                    ticker={name}\n                    companyName={companyName}\n                    updateUi={this.updateUIPrice}\n                />\n\n\n\n\n            </div>\n        )\n\n    }\n}\n\nexport default StockData;","import React, { Component } from 'react';\nimport './stylesheet.scss'\nimport {Icon} from \"semantic-ui-react\";\n\nclass RedditPost extends Component {\n\n    trimPercent = number => {\n        number = Math.abs(number);\n        let whole = Math.floor(number);\n\n        let percent = Math.round((number - whole) * 100);\n\n        if (isNaN(whole) || isNaN(percent)) {\n            return '0.00';\n        }\n\n        return whole + '.' + percent;\n    };\n\n    render() {\n        const {title, description, change} = this.props;\n        return (\n            <div style={{color: 'white', marginBottom: '3rem'}}>\n                <h3>{title}</h3>\n                <span\n                    style={\n                        change < 0\n                            ? { color: 'rgb(255,80,0)', marginTop: '2rem', marginLeft: '5px', fontSize: '15px'}\n                            : { color: 'rgb(0,200,5)', marginTop: '2rem', marginLeft: '5px', fontSize: '15px'}\n                    }\n                    className=\"change\">\n                    {this.trimPercent(change * 100)}%\n                    <Icon\n                        className=\"icon\"\n                        name={change < 0 ? 'arrow down' : 'arrow up'}\n\n                    />\n                    </span>\n\n                {/*<p>{description}</p>*/}\n\n            </div>\n        );\n    }\n}\n\nexport default RedditPost","import React, { Component } from 'react';\nimport './stylesheet.scss'\nimport moment from 'moment';\n\nimport data from '../../constants/result'\nimport {Line} from \"react-chartjs-2\";\nimport {Header, Icon} from \"semantic-ui-react\";\n\nconst PARTITIONS = 100;\n\nclass RedditData extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            percentChangeBullScore: null,\n            bullScoreGraph: null,\n        }\n    }\n\n    trimPercent = number => {\n        number = Math.abs(number);\n        let whole = Math.floor(number);\n\n        let percent = Math.round((number - whole) * 100);\n\n        if (isNaN(whole) || isNaN(percent)) {\n            return '0.00';\n        }\n\n        return whole + '.' + percent;\n    };\n\n    removeOutliers = (labels, bullScores) => {\n        var values = bullScores.concat();\n\n        // Then sort\n        values.sort( function(a, b) {\n            return a - b;\n        });\n\n        /* Then find a generous IQR. This is generous because if (values.length / 4)\n         * is not an int, then really you should average the two elements on either\n         * side to find q1.\n         */\n        var q1 = values[Math.floor((values.length / 4))];\n        // Likewise for q3.\n        var q3 = values[Math.ceil((values.length * (3 / 4)))];\n        var iqr = q3 - q1;\n\n        // Then find min and max values\n        var maxValue = q3 + iqr*1.5;\n        var minValue = q1 + iqr*1.5;\n\n        let indicesToRemove = [];\n\n        for (let i = 0; i < bullScores.length; i++) {\n            if (bullScores[i] <= minValue || bullScores[i] >= maxValue) {\n                bullScores[i] /= 1000;\n                indicesToRemove.push(i);\n            }\n        }\n\n        const labelsUpdate = labels.filter((label, index) => !indicesToRemove.includes(index));\n        const bullsUpdate = bullScores.filter((bull, index) => !indicesToRemove.includes(index));\n\n        return { labelsUpdate: labels, bullsUpdate: bullScores};\n\n    };\n\n    render() {\n        const { startDate, endDate, currentStock} = this.props;\n        const { percentChangeBullScore, bullScoreGraph } = this.state;\n\n        let arr = data[currentStock];\n\n        let startTime = startDate.getTime();\n        let endTime = endDate.getTime();\n        let increment = (endTime - startTime) / PARTITIONS;\n\n        let dataOfCompanies = JSON.parse(localStorage.getItem(`daily`));\n        let { companyName } = dataOfCompanies.find(d => d.name === currentStock);\n\n        let labels = [];\n        let bullScores = [];\n\n        let totalBullScore = 0;\n\n        for (let i = startTime; i < endTime; i += increment) {\n            let bullScore = 0;\n            let dataPoints = arr.filter(a => (a.created * 1000) > i && (a.created * 1000) < (i + increment));\n            dataPoints.forEach(post => {\n                bullScore += (post.num_comments * post.compound);\n            });\n\n            labels.push(moment(new Date(i)).format('MMMM Do YYYY'));\n            bullScores.push(bullScore);\n            totalBullScore += bullScore;\n        }\n\n       const {labelsUpdate, bullsUpdate} = this.removeOutliers(labels, bullScores);\n\n        labels = labelsUpdate;\n        bullScores = bullsUpdate;\n\n\n\n        totalBullScore = bullScoreGraph || (totalBullScore /bullScores.length);\n\n        const dataLine = {\n            labels: labels,\n            datasets: [\n                {\n                    label: `${companyName} (${currentStock}) Bullishness`,\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'black',\n                    borderColor: 'green',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: bullScores\n                }\n            ]\n\n        };\n\n\n        let priceColor = totalBullScore < 0 ? 'rgb(255,80,0)' : 'rgb(0,200,5)';\n\n        return (\n            <div className=\"LineChart\">\n\n                <Header as='h1' className=\"header\" style={\n                    !percentChangeBullScore ? {width: 'auto', color: 'white'}\n                        : percentChangeBullScore < 0 ?{width: 'auto', color: 'rgb(255,80,0)'} : {width: 'auto', color: 'rgb(0,200,5)' }\n                }>\n                    {companyName ? `${companyName} (${currentStock})` : currentStock}\n\n                    <Header.Subheader style={{color: priceColor, marginTop: '1rem', fontSize: '30px'}}>\n                        {this.trimPercent(totalBullScore)}\n                        {percentChangeBullScore &&\n                        <span\n                            style={\n                                percentChangeBullScore < 0\n                                    ? {color: 'rgb(255,80,0)', marginTop: '2rem', marginLeft: '5px', fontSize: '15px'}\n                                    : {color: 'rgb(0,200,5)', marginTop: '2rem', marginLeft: '5px', fontSize: '15px'}\n                            }\n                            className=\"change\">\n                    {this.trimPercent(percentChangeBullScore)}%\n                    <Icon\n                        className=\"icon\"\n                        name={percentChangeBullScore < 0 ? 'arrow down' : 'arrow up'}\n\n                    />\n                    </span>\n                        }\n                    </Header.Subheader>\n                </Header>\n\n\n                <h3 style={{color: 'white'}}>Wolf Score</h3>\n                <Line data={dataLine}\n                      // options={chartOptions}\n                      // ref={reference => lineChartInst = reference}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default RedditData;","import React, { Component } from 'react';\nimport './stylesheet.scss'\nimport data from '../../constants/result'\nimport RedditPost from \"./RedditPost\";\n\nimport { Header, Icon, Divider } from 'semantic-ui-react'\n\nclass RedditPosts extends Component {\n\n    trimPercent = number => {\n        number = Math.abs(number);\n        let whole = Math.floor(number);\n\n        let percent = Math.round((number - whole) * 100);\n\n        if (isNaN(whole) || isNaN(percent)) {\n            return '0.00';\n        }\n\n        return whole + '.' + percent;\n    };\n\n\n    render() {\n\n        const { currentStock, startDate, endDate } = this.props;\n\n        let posts = data[currentStock];\n\n        posts = posts.filter(post => {\n            let created = post.created * 1000;\n            return created >= startDate.getTime() && created <= endDate.getTime();\n        });\n\n        let bulls = posts.filter(post => post.compound > 0);\n        let bears = posts.filter(post => post.compound < 0);\n\n        bulls.sort((a, b) => b.body.length - a.body.length);\n        bears.sort((a, b) => b.body.length - a.body.length);\n\n        let averagePositive = 0;\n        let averageNegative = 0;\n\n        bulls.forEach(bull => {\n            averagePositive += bull.compound;\n        });\n\n        bears.forEach(bear => {\n            averageNegative += bear.compound;\n        });\n\n        averagePositive /= bulls.length;\n        averageNegative /= bears.length;\n\n        return (\n            <div className=\"RedditPosts\">\n                <h1 style={{color: 'white', fontSize: '50px'}}>Reddit Analysts</h1>\n                <div style={{color: 'white', float: 'left', width: '43%'}}>\n                    <h1 style={{color: 'white', display: 'inline', fontSize: '40px'}} icon as='h1'>\n                        Bulls\n                    </h1>\n\n                    <span\n                        style={\n                            averagePositive < 0\n                                ? { color: 'rgb(255,80,0)', marginTop: '2rem', marginLeft: '20px', fontSize: '12px'}\n                                : { color: 'rgb(0,200,5)', marginTop: '2rem', marginLeft: '20px', fontSize: '12px'}\n                        }\n                        className=\"change\">\n                    {this.trimPercent(averagePositive * 100)}%\n                    <Icon\n                        className=\"icon\"\n                        name={averagePositive < 0 ? 'arrow down' : 'arrow up'}\n\n                    />\n                    </span>\n\n\n                    <Divider/>\n                    {bulls.map(bull => (\n                        <RedditPost\n                            title={bull.title}\n                            description={bull.body}\n                            change={bull.compound}\n                        />\n                    ))}\n\n                </div>\n                <div style={{color: 'white', float: 'right', width: '43%'}}>\n                    <h1 style={{color: 'white', display: 'inline', fontSize: '40px'}} icon as='h1'>\n                        Bears\n                    </h1>\n\n                    <span\n                        style={\n                            averageNegative < 0\n                                ? { color: 'rgb(255,80,0)', marginTop: '2rem', marginLeft: '20px', fontSize: '12px'}\n                                : { color: 'rgb(0,200,5)', marginTop: '2rem', marginLeft: '20px', fontSize: '12px'}\n                        }\n                        className=\"change\">\n                    {this.trimPercent(averageNegative * 100)}%\n                    <Icon\n                        className=\"icon\"\n                        name={averageNegative < 0 ? 'arrow down' : 'arrow up'}\n\n                    />\n                    </span>\n\n                    <Divider/>\n                    {bears.map(bear => (\n                        <RedditPost\n                            title={bear.title}\n                            description={bear.body}\n                            change={bear.compound}\n                        />\n                    ))}\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RedditPosts","import React, { Component } from 'react';\nimport Menu from \"../../Components/Menu\";\nimport './stylesheet.scss'\nimport { Icon, Header, Divider} from 'semantic-ui-react';\nimport StockData from \"../../Components/StockData\";\nimport Calendar from \"../../Components/StockData/Calendar\";\nimport RedditData from \"../../Components/RedditData\";\nimport RedditPosts from \"../../Components/RedditPosts\";\n\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentStock: 'GME',\n            startDate: new Date(2021, 0, 7, 0, 0, 0, 0),\n            endDate: new Date(2021, 1, 7, 0, 0, 0, 0),\n            showReddit: false,\n            selectedDate: null,\n            isPositive: false,\n        }\n    }\n\n    handleStockChange = (stock) => this.setState({currentStock: stock});\n    handleDateChange = (startDate, endDate) => { this.setState({startDate, endDate})};\n\n    showRedditFunc = (show, date, isPositive) => this.setState({showReddit: show, selectedDate: date, isPositive});\n\n    render() {\n\n        const { currentStock, startDate, endDate, showReddit, selectedDate, isPositive } = this.state;\n\n        console.log(selectedDate);\n\n        const tickers = [\"GME\", \"SPY\", \"AMC\", \"BB\", \"TSLA\", \"CRSR\", \"NOK\", \"AAPL\", \"SNAP\"];\n\n        return (\n            <div className=\"home\">\n                <Header className='homepage-title' as='h3' icon>\n                    <Icon style={{marginBottom: '2rem', color: 'firebrick'}} name=\"rocket\"/>\n                    <span className=\"Main-header\">The Wolf of WallStreetBets</span>\n                    <Header.Subheader className=\"subheader-1\">\n                        \"Analytics For The People<br/> By The People\"\n                    </Header.Subheader>\n                </Header>\n                <Menu\n                    handleStockChange={this.handleStockChange}\n                    currentStock={currentStock}\n                    tickers={tickers}\n                    showReddit={showReddit}\n                    selectedDate={selectedDate}\n                    isPositive={isPositive}\n                />\n                <br/>\n\n                <StockData\n                    startDate={startDate}\n                    endDate={endDate}\n                    currentStock={currentStock}\n                    changeDate={this.handleDateChange}\n                    showReddit={this.showRedditFunc}\n                />\n\n                <RedditPosts\n                    startDate={startDate}\n                    endDate={endDate}\n                    currentStock={currentStock}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default Home","import logo from './logo.svg';\nimport './App.css';\nimport Home from \"./Views/Home\";\nimport React from \"react\";\nimport 'semantic-ui-css/semantic.min.css'\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}